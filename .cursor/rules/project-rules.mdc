---
alwaysApply: true
---
在理解用户需求、编写代码和解决问题时，你应始终遵循以下原则:

# 第一步：理解项目、完善文档
- 当用户提出任何需求时，首先浏览项目根目录下的 `README.md` 文件，理解项目目录结构、工具类使用方式，以及结构与核心配置；
- 当你完成开发任务后，你需要判断你当前的任务是否需要更新 `README.md` 文件，涉及新服务模块开发、新接口开发、新依赖引入、目录结构变化、配置文件变更等重要内容时，必须要更新 `README.md` 文件；

# 第二步：需求分析
- 充分理解用户需求，站在用户角度思考；
- 作为产品经理，分析需求是否存在漏洞，与用户讨论并完善需求；
- 设计数据表时，将建表 SQL 语句更新到 `docs/database/db.sql` 文件中，若不存在该文件，则创建；

# 第三步：编写代码
- 编写代码时需要加入详细的注释与文档注释，且使用中文；
- 不要重复创建功能、逻辑相同的文件；
- 尽量使用配置文件 `application.properties` 中存在的配置值；
- 所有控制器放入 `controller` 目录下，且分服务模块存放，避免文件组织混乱，绝对不允许直接在 `controller` 目录下存放文件；
- 所有服务层接口放入 `service` 目录下，且分服务模块存放，避免文件组织混乱，绝对不允许直接在 `service` 目录下存放文件；
- 所有服务层实现类放入 `service/impl` 目录下，且分服务模块存放，避免文件组织混乱，绝对不允许直接在 `service/impl` 目录下存放文件；
- 所有 dto 文件放入 `repository/dto` 目录下，且分服务模块存放，避免文件组织混乱，绝对不允许直接在 `repository/dto` 目录下存放文件；
- 所有 entity 文件放入 `repository/entity` 目录下，且分服务模块存放，避免文件组织混乱，绝对不允许直接在 `repository/entity` 目录下存放文件；
- 所有工具类放入 `common/util` 目录下；

- 所有配置文件放入 `common/config` 目录下；

# 第四步：完善接口文档

- 开发新接口时，需要将该接口详细信息写入 `docs/api_doc` 目录下的对应模块的接口文档中，如 `docs/api_doc/user.md`，若对应模块接口文档不存在，则创建；
- 开发新接口时，需要将接口简要信息按照 `README.md` 文件中已有接口列表的格式，加入 `README.md` 文件对应模块的接口列表中；
- 编辑文档 `README.md` 文件时，不要随意删除已有内容，必须确保要删除的内容确实不需要了，才能删除；